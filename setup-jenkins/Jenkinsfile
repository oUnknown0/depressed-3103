pipeline {
    agent any
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
    environment {
        scannerHome = tool 'SonarQube'
    }
    stages {
        stage('Checkout repository') {
            steps {
                echo "Entering 'Checkout repository' stage"
                checkout scm
                echo "Completed 'Checkout repository' stage"
            }
        }

        stage('Check Current Directory') {
            steps {
                sh "ls -la"
            }
        }

        stage('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: '''
                            -o './'
                            -s '../web/script'
                            -f 'ALL' 
                            --prettyPrint''', odcInstallation: 'OWASP Dependency-Check Vulnerabilities'

                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    def sonarScannerHome = tool 'SonarQube';
                    env.PATH = "${sonarScannerHome}/bin:${env.PATH}"

                    withSonarQubeEnv('SonarQube') {
                        sh """
                        sonar-scanner \
                        -Dsonar.projectKey=OWASP \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.login=sqp_c1330fcab50a4fb349a2da81ceb4ac41a00a5d3b
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh "python3 --version"
                    sh "python3 -m pip install selenium --break-system-packages"
                    sh "python3 ./web/test/test.py"
                }
            }
        }

        // stage('Build, start docker and kill images') {
        //     steps {
        //         sh "dockerd &"
        //         sh "docker --version"
        //         sh "docker-compose -f setup-jenkins/docker-compose.yml down"
        //         sh "docker-compose -f setup-jenkins/docker-compose.yml build"
        //         sh "docker-compose -f setup-jenkins/docker-compose.yml up -d"
        //         sh "docker ps"
        //         sh "docker-compose -f setup-jenkins/docker-compose.yml down"
        //     }
        // }
    }
}
